include::/tmp/t.ad[]

+++ <small> +++

* Repo: httpx://github.com/lvv/scc[GitHub],  httpx://bitbucket.org/lvv/scc[BitBucket] +
* Requires:  +++ C++11 +++   compiler.  Tested with GCC-4.7.2, GCC-4.8(pre release), CLANG-3.2(pre release) +
* License:  httpx://en.wikipedia.org/wiki/Boost_Software_License[Boost Software License]

+++ </small> +++

C++ REPL
--------

At bash prompt - expression evaluated and printed:

----------------------------------------------------------------------------
scc 2+2								
4
----------------------------------------------------------------------------

If expression is not terminated with semicolon, it is sent to `std::cout`.
If snippet have bash special characters,  it must be in single or double
quotes. If expression starts with minus, end-of-options indicator `--` must be used:

----------------------------------------------------------------------------
scc '"hello world"'
hello world

scc -- -42
-42

scc "bitset\<8>('a')"
01100001

scc 'double x=0.5;  sin(x)'						
0.479426

echo "ABC"  |  scc 'char c;  while (cin>>c)  cout << tolower(c);'
abc
----------------------------------------------------------------------------

If double semicolon `;;` is present, then what come before it is goes before `main` (into the file scope):

--------------------------------------------
scc 'int f(int i) {return  i+i;} ;;  f(10)'
20
--------------------------------------------

Snippet is evaluated in environment where all STL includes are included and almost
all STL objects are imported into default namespace with `using std::...;`

If you need only plain +++C++ +++ REPL, that is about all you need to know.
You can skip to link:#_install[install] section now.

Sections that follow are about SCC STL extensions, which probably deserve it own project, and shortcuts to squeeze
+++C++ +++ verbosity for one-liner context.


Simple IO
---------

Bar-print
~~~~~~~~~

Instead of `std::cout` printing, in SCC you can use so called **bar-print**.
Below are bar-print statements with equivalent code in comments:

---------------------------------------------------------------
_  x;                  //  cout << x;
__ x;                  //  cout << x << endl;
__ x, y;               //  cout << x << " " << y << endl;
-------------------------------------------------------------------------

On last line `" "` will not be printed if  `x` or `y` are strings.

On exit, SCC also checks if last output was unterminated  with linefead.  If
true, it will add a linefead.  Let say if last statement was `cout << x;`, then SCC
will add `cout << endl;` on exit.


OI - Generic ostream_iterator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Standard library includes `std::ostream_iterator`. Unlike `std::cout` it
accepts only one specific type (specified at construction time) and it is not
pre-defined object.   So to use it with STL algorithms, you need
call its quite verbose constructor.

Let say we have `vector<int> V;` and `set<string> S;` and we want
to print these.  With `std::ostream_iterator`:

------------------------------------------------------------------
copy(V.begin(), V.end(), ostream_iterator<int>   (cout, " "));
copy(S.begin(), S.end(), ostream_iterator<string>(cout, " "));
-------------------------------------------------------------------

Include `io.h` defines `oi` object - SCC replacement for `ostream_iterator`, which can work with any type and
is pre-defined.  With `oi`, above example will be:

-------------------------------------------------------------------
copy(V.begin(), V.end(), oi);
copy(S.begin(), S.end(), oi);
-------------------------------------------------------------------

Same using range operators, more about these later: 

-------------------------------------------------------------------
copy(+V, -V, oi);
copy(+S, -S, oi);
-------------------------------------------------------------------

Also assigning a container to `oi` is equivalent to doing
`std::copy`, so still shorter:

-------------------------------------------------------------------
oi = V;
oi = S;
-------------------------------------------------------------------

STL Containers input / output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Any STL container can be also printed without `oi`.  You can just send it to
`std::cout` or bar-print it.

In below example `__ C;` can be replaced with `cout << C;`. Equivalent code and
output is shown in comments:

--------------------------------------------------------------------
vint            C {1,2,3};        __ C;	   //  vector<int> C{1,2,3};
 					   //  cout << "{"; 
					   //  for(auto it=C.begin(); it!=C.end()-1; it++)
					   //       cout << *it << ", ";
					   //  if(!C.empty()) cout << C.back(); 
					   //  cout << "}\n";
					   //  prints: {1, 2, 3}
					
int             C[] {1,2,3};       __ C;   //  {1,2,3} 
array<int,3>    C {1,2,3};         __ C;   //  {1,2,3}
tuple<int,int>  C {1,2};           __ C;   //  ⟨1, 2⟩ 
map<int,int>    C {{1,2},{3,4}};   __ C;   //  {⟨1,2⟩, ⟨3,4⟩} 
vector<vint>	C {{1,2},{3,4}};   __ C;   //  {{1, 2}, {3, 4}}
-------------------------------------------------------------------

Same for input:

----------------------------------------------------------------------
echo 1 2    | scc 'vint            C;     cin >> C;   C'	//  {1,2}
echo 1 2    | scc 'int             C[2];  cin >> C;   C'	//  {1,2}
echo 1 2    | scc 'tuple<int,int>  C;     cin >> C;   C'	//  ⟨1,2⟩
echo 1 2    | scc 'array<int,2>    C;     cin >> C;   C'	//  {1,2}
echo 1 2    | scc 'set<int>        C;     cin >> C;   C'	//  {1,2}
echo 1 2 3 4| scc 'map<int,int>    C;     cin >> C;   C'	//  {⟨1,2⟩, ⟨3,4⟩}
----------------------------------------------------------------------

//////////////
echo 1 2    | scc 'int             C[2];  cin >> C;   C'	//  {1, 2}
echo 1 2    | scc 'array<int,2>    C;     cin >> C;   C'	//  {1, 2}
echo 1 2.2  | scc 'pair<int,float> p;     cin >> p;   p'	//  ⟨1,2.2⟩
echo 1 2    | scc 'tuple<int,int>  C;     cin >> C;   C'	//  ⟨1, 2⟩
////////////

If a container have non-zero length, then the corresponding number of elements will be
read.  If container is empty then input will be EOF-terminated.

Object IN
~~~~~~~~~

Pre-defined object `in` can be used as value in expression which is read from
`std::cin`.

--------------------------------------------------------------------
int i(in);			//  int i;  cin >> i;	
float x = 1.1 + float(in);	//  float y;  cin >> y;   float x = 1.1 + y;
--------------------------------------------------------------

WARNING: Object `in` does not check for EOF. Use only in
context where you can ignore or do not expect EOF.

To input a container:

--------------------------------------------------------------------
vint V = in(10);
vint W = in;		// Till EOF.  Note:  we can not use:  vint W(in);
--------------------------------------------------------------------

Here is example of +++ C++ +++ vs SCC input where we need to read a number and than
corresponding number of container elements:

--------------------------------------------------------------------
int N; 
cin >> N;
vector<int> V(N); 
for(int i=0; i<N; i++) 
	cin >> V[i];
--------------------------------------------------------------------

With object `in`:

--------------------------------------------------------------------
vint V = in(in);
--------------------------------------------------------------------


IO.H - Standalone Use
~~~~~~~~~~~~~~~~~~~~~

File `io.h` can be used as standalone, independent include. 

--------------------------------------------
#include <io.h>
int main() {
	__ "hello world";
}
-------------------------------------------

Includes `simple.h`, `cj.h` and `stl.h` can also be used independently.


STO - STL Containers Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

STO Ranges are generalization of containers.
STO defines operators to work with ranges (and std containers). 
It have two groups of operations.  First is shortcuts for containers' member functions and simple
extensions. Second is more complex operations like
fold, reduce, filter and arbitrary transformation of ranges.


///////////////////////////////////////////////////////////
Below is string manipulation example.   Given `Thello?` string, it
transforms it and prints -  `" H e l l o ! "`.  In +++C++ +++:  

------------------------------------------------------
deque<char>  S;   
for(char c : "Thello?")  S.push_back(c);
S.pop_front();
S.pop_back();	// '\0'
S.front() = 'H';
S.back()  = '!';
S.push_front('"');
S.push_back('"');
S.push_back('\n');
copy(S.begin(), S.end(), ostream_iterator<char>(cout, " "));
------------------------------------------------------

Equivalent in SCC:

------------------------------------------------------
dchar  S;  S << "Thello?";	
--S--;			
++S = 'H';  
'"' >> S << "!\"\n";
oi = S;
------------------------------------------------------
////////////////////////////////////////////////////////////////

In table below are shortcuts for container member functions.
Unlike STL member functions they usually return result of operation (so it can be used in range expressions).

----------------------------------------------------------------
+C			//  C.begin()
-C			//  C.end()
++C			//  C.front()
C++			//  C.back()
--C			//  C.pop_front()
C--			//  C.pop_back()

C << x			//  C.push_back(x)
x >> C			//  C.push_front(x)
C >> x			//  x = C.back(x);   C.pop_back();
x << C			//  x = C.front(x);  C.pop_front();
C1 << C2		//  copy(C2.begin(), C2.end(), back_inserter(C1));
C1 >> C2		//  copy(C1.rbegin(), C1.rend(), front_inserter(C2)); 


++Pair			//  Pair.first
Pair++			//  Pair.second

++Tuple			//  get\<0>(Tuple)
Tuple++			//  get<tuple_size<tuple<Types...> >::value-1>(Tuple)

			//  STACK
S << x			//  S.push(x)
S++ 			//  S.top(x)
S >> x			//  x = S.top(x);  S.pop()
S-- 			//  S.pop()

			//  QUEUE
Q++ 			//  Q.back(x)
++Q 			//  Q.front(x)
--Q 			//  Q.pop(x)
Q << x			//  Q.push(x)
x << Q			//  x = Q.front(x);  Q.pop()
----------------------------------------------------------------


Ranges
~~~~~~

Ranges are numeric ranges,  iterator ranges,  expression ranges, stl
containers, c-arrays and c-strings.  STO defines C-strings as zero terminated
arrays of `char` (not `signed char` or `unsigned chars`).  Expression ranges
are result of various range expression (like fold/reduce/filter) and usually are
not constructed directly.


Numeric range is simple numeric sequence generator :

-----------------------------------
 scc 'range(0,10)'
 {0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10}

 scc 'range(10,0,-1.5)'
 {10, 8.5, 7, 5.5, 4, 2.5, 1}
-----------------------------------

STO ranges (iterator, basic-derived, numeric)  do not contain data, they refer
to an existing STL container or generate its elements.

Iterator range: assign 42 to values from 2 to 5:

------------------------------------
scc 'vint v;  v << range(0,9);   range(v/2, v/5) = 42;  v'
{0, 1, 42, 42, 42, 5, 6, 7, 8, 9}
------------------------------------

In above, `v/2` returns pointer to 1st element with value `2`. 

STO ranges provides some capabilities that standard containers do not have.
For example, STL containers do not have assignment operator for containers of
different types and it does not recognize c-string as a container.  Ranges do
not have such limitations.  Below is  assignment to vector from numeric range:

------------------------------------------
scc  'vint v;  auto r=range(v);  r = range(0,9);  r, v'
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
-------------------------------------------------

Operation with c-strings. We first assign a c-string and then append another:

-----------------------------------------
scc 'char S[99];  range(S) = "abc";  __ S;   range(S) << " XYZ"'
abc
abc XYZ
------------------------------------------

Note that we can not define overloaded operations for POD types (like c-string).
+++C++ +++ do not allow this. This is a reason why we have to wrap `S` with `range()`. For binary
ops, we need to wrap at least one of operands in a class.

Same example, but for `str::string` (without range-wrapping):

-----------------------------------------
scc 'str s;  s = "abc";  __ s;   s << " XYZ"'
abc
abc XYZ
------------------------------------------

Here we use `std::string` assignment operator to append, and  STO `<<` op to append.

---------------------------------------------------------------------
scc 'str S="John Q Public  (650)1234567";  S|isdigit=*"X";  S'
John Q Public  (XXX)XXXXXXX
-----------------------------------------------------------------

In above,  `*"X"` is the same thing as `'X'`.



Pipe, Map, Reduce
~~~~~~~~~~~~~~~~~

Functors are function object, lambdas and
plain functions. Unfortunately many functions inherited from C are not usable
with STO.  STO relies on fact that functor have argument of the same type as
range element type.  But for examples `ctype.h` functions, which work with
c-strings, have not `char` but `int` as parameter and they can be defined as macros.  And
what makes it even worse,  they are randomly injected into default namespace by +++ LIBSTDC++ +++.
As workaround STO put equivalent functions with correct signatures into `sto`
namespace.


Map/Transform
~~~~~~~~~~~~~

Operator `sto::operator* (Range,Functor)` is equivalent to `std::transform`:

------------------------------------------
scc 'range("abc") * toupper'
ABC

scc 'vint V{-1,0,1};  V * abs'
{1, 0, 1}
------------------------------------------

In above, `toupper` is defined in `functor.h`,  `abs` is taken from `std::`.

Expression `V * abs` is equivalent to:

----------------------------------------------
std::transform(V.begin(), V.end(), V.begin(), std::abs<int>)'
----------------------------------------------


Pipe
~~~~

Pipe operator have much more freedom on what it can do with range. It can filter out,
add, reorder and convert to different type. It is overloaded for different right-hand-side objects.

Pipe:  range | predicate
^^^^^^^^^^^^^^^^^^^^^^^^

Predicate is functor with signature `bool(*)(range_elem_type)`. If such is used
with pipe operator, all elements which evaluate to `false` with predicate - are
filtered out:

------------------------------------------
scc 'range("abc-123") | isdigit'
123

scc '(range("abc-123, xyz/") | isalnum) * toupper'
ABC123XYZ
------------------------------------------

Range expression are lazy evaluated - value is computed only when needed. 
In above examples there was no dynamic memory or stack  space allocation. 
It should be as efficient as manually written `for` loop.



Reduce/Fold
~~~~~~~~~~~

Operator `sto::operator|| (Range,Functor)` is equivalent to `std::accumulate`

------------------------------------------
scc 'vint V{1,2,3};  V || plus<int>()'
6

scc 'vint V{1,2,3};  V || multiplies<int>()'
6

scc 'vint V{1,2,3};  V || min'
1
------------------------------------------

Expression  `V || min` is equivalent to:

-------------------------------------------------
std::accumulate (
	std::next(V.begin()),
	V.end(),
	V.front(),
	static_cast<const int& (*)(const int&, const int&)>(std::min<int>)
);
------------------------------------------------


Find (brute force algorithm) maximum of  `cos(x)` for `8 < x < 9`:

------------------------------------------
scc 'range(8, 9, 0.01) * cos  || max'
-0.1455
------------------------------------------

--- THIS SECTION IS INCOMPLETE ---

///////////////////////////////////////////////
Rn / x		-> it		// find(+Ct, -Ct, x)
Rn % x		-> bool		// find(+Ct, -Ct, x) != -Ct
Rn / f		-> it
Rn % f		-> bool		// find(+Ct, -Ct, x) != -Ct
Rn / Rn		-> Rn		// search(+Ct, -Ct, +Rg, -Rg) 
Rn - it 			// Ct.eraze(it);
Rn - Rn				// erase
Rn = Rn2 			// with conversion

src >> ct-dest
ct-dest << src

Rn  * f(x)	-> Rn		// transform	(map)
Rn || f(x,y)	-> T 		// accumulate    (fold)
Rn  | filter-t	-> Rn 		// filter

////////////////////////////////////////////////

////////////////////////////////////////////////////////
/*	 		Ct	string	A	c-str
*	-------------+-------------------------------
*	+Ct		+	+	-	-
*	-Ct		+	+	-	-
*	~Ct		+	+	-	-
*	!Ct		+	+	-	-
*	++Ct		+	+	-	-
*	Ct++		+	+	-	-
*	Ct << x		+	+	-	-
*/
/////////////////////////////////////////////////////////

Shortcuts and predeclared vars
-------------------------------

Shortcuts are typedefs and macros to cut verbosity. For example:

------------------------------------------------------
WRL	-->   while(read_line())      
str	-->   std::string  
lint	-->   std::list<int>  
vint	-->   std::vector<int>  
dint	-->   std::deque<int>  
dfloat	-->   std::deque<float>  
...
------------------------------------------------------

Some variables are pre-defined:

* `i`, `j`, `k`, `n`, `m` -- `long`, initialized to 0
* `x`, `y`, `z` --  `double`, initialized to 0
* `s`, `w` -- `std::string`
* `c` -- `char`
* `p` -- `char*`

You don't need to remember these. Predefined variables are defined in external
to snippet scope, so you can
re-define these to what ever you want. 


/////////////////////////////////////////////////////////////////////
Examples
--------

Square an array.  +++C++11 +++ is on by default:

----------------------------------------------------------------------------
scc 'vint V{1,2,3};  for(auto v:V) v*=v;   V'			
{1, 4, 9}								
----------------------------------------------------------------------------
*/

Calculate words frequencies from `stdin`. (`w` - is pre-defined `std::string`)

----------------------------------------------------------------------------
echo aa bb aa | scc 'map<str,int> M;  while(cin>>w) M[w]++;  M' 
{⟨aa,2⟩, ⟨bb,1⟩}
----------------------------------------------------------------------------

You can also find a lot of examples in `u-*` files.  These are unit-test like files.
/////////////////////////////////////////////////////////////////////



Native AWK
~~~~~~~~~~

SCC also can be used as tool for stream processing - something like native AWK. 
Syntax is not exactly AWK's,  it is still +++C++ +++, 
but it is quite similar.

Biggest difference  is script layout. AWK's script have following
elements (simplified):

----------------------------------------------------------------------------
awk 'BEGIN{begin-expr};  {per-record-expr};  END{end-expr}'
----------------------------------------------------------------------------

SCC have two alternatives for above. First is explicit while-loop:

----------------------------------------------------------------------------
scc 'begin-expr;  WRL  per-record-expr;   end-expr;'
----------------------------------------------------------------------------

Shortcut `WRL` expands to `while(read_line())`.  
Function `read_line()`, reads input line and splits it into fields.

Second alternative is to use options `-n` and `-p`.
With `-n`, record is read, split into fields and snippet is evaluated for every
record.  With `-p`, additionally all fields are printed after snippet was
evaluated.  These are equivalent to PERL's and 
are convenient when we do not have _begin-expr_ and _end-expr_.

----------------------------------------------------------------------------
scc -n 'per-record-expr;'
----------------------------------------------------------------------------

Fortunately,  GCC allows use of `$` in identifiers, so AWK's dollar 
variables (`$0`, `$1`, `$NF`) are valid in SCC.

In SCC, line's fields are of special string type `fld`, it is similar to `std::string` but it can be
used in arithmetic expressions - they can be implicitly converted to corresponding numeric type. And it
can be assigned a numeric value. That is `fld` behave like AWK's vars.
Numeric types are any of `int`, `float`, etc.

--------------------------------
fld   f("1");
int     i;

i = f;		// 1
i = f+1;	// 2
f = 2;		// "2"
f + " m/s"	// "2 m/s"
f + 5		// "7"
---------------------------------

SCC supports following AWK's global variables:

* `$`	-  derived from  `std::deque<fld>` — line's fields
* `NF`	-  `long`,  number of fields (set after read_line())
* `NR` 	-  `long`,  number of records (set after read_line())
* `OFS`	-  `strr`, output field separator (another special type - string reference).
* `FS` 	-  `strr`, input field separator.  
* `ORS`	-  `strr`, output record separator 
* `RS` 	-  `strr`, input record separator.  
* `FILENAME` - `const char[]`, current filename being processed


More examples.  Sum-up `DF(1)` used-disk-space column.  In AWK and SCC:

----------------------------------------------------------------------------
df | awk '{n+=$3};  END{print n}'
31399199

df | scc 'WRL n+=$3;  n' 
31399199
----------------------------------------------------------------------------

We can also replace column number with symbolic name (from `df` output header):

----------------------------------------------------------------------------
df | scc -H 'WRL n+=$("Used");  n' 
31399199
----------------------------------------------------------------------------

Prepend line number to every line.

----------------------------------------------------------------------------
echo -e 'aaa\nbbb'   |   scc -p NR
1 aaa
2 bbb
----------------------------------------------------------------------------

For every line: first `NR` is printed (notice that there is no semicolon),
then `$0`.

Now lets make comma separated fields out of colon separated.  Option `-o` sets `OFS`
(output field separator), `-F` - set `FS`  Snippet is empty in this example.

----------------------------------------------------------------------------
echo 1:2:3 | scc -F: -o, -p
1,2,3
----------------------------------------------------------------------------

Or equivalent:

----------------------------------------------------------------------------
echo 1:2:3 | FS=: OFS=, scc -p
1,2,3
----------------------------------------------------------------------------


Replace `"-"` or  `"none"` with `"n/a"` in 2nd column using `std::regex`.  In AWK and SCC:

---------------------------------------------------------------------------
echo -e '1 -\n2 none\n3 abc'  |  awk '{gsub(/^(none|-)$/,"n/a",$2);  print $0}'
1 n/a
3 n/a
4 abc

echo -e '1 -\n2 none\n3 abc'  |  scc -p 'if ($2 == "(none|-)"_R)  $2="n/a";'
1 n/a
3 n/a
4 abc
----------------------------------------------------------------------------



C-string with `_R` suffix are `std::regex` literal.  The `operator==` calls `std::regex_match()`.
Unfortunately GCC's LIBSTDC not yet +++ C++11 +++  compliant.  Algorithms
`std::regex_replace` and `std::regex_search` are not implemented yet in
LIBSTDC++  and we have to use `if`.


Install
-------

-----------------------------------------
git clone http://github.com/lvv/scc scc
cd scc
echo "PATH+=:$PWD/scc/" >> ~/.profile
. ~/.profile
scc '"SCC is installed"'
---------------------------------------

GCC Pre-compiled headers
~~~~~~~~~~~~~~~~~~~~~~~~
For GCC you can enable precompiled headers, which will allow slightly (20%) faster compile:

-----------------
cd path-to-scc-home
scc -r
ls -l .gch
-----------------

Command `scc -r` will create directory `.gch`.
You need re-generate pre-compiled headers if you are updating (with `git pull`) SCC or GCC with the same command - `scc -r`
Do not use GCC pre-compiled headers if you are modifying source.  To disable pre-compiled headers, run `rm -rf .gch`.   



Status 
------

SCC is in alpha stage. Version with "latest" git tag (if any) and
documented features are more stable.

SCC uses +++ C++11 +++ extensively.  Because no complier yet
implemented +++ C++11 +++ fully and each implemented different subset, 
SCC very picky about compiler.  See GCC, CLANG sections below. 

Regex in `RS`/`FS` are currently not supported (but were in v0.1) 

Parser which extracts last +++ C++ +++ statement from snippet is semi-broken.
It sometimes incorrectly parse (to extract last expression) multi-line scripts
or expressions with "{}". See `u-sed` file for details.  As workaround
terminate every line with semicolon (even comment-line) and do not use
print-if-not-terminated-with-semicolon feature.


GCC 
~~~
 
SCC was mostly tested with GCC-4.7.2/4.8-pre-release and CLANG-3.2-pre-release.
If you need to use SCC with older compiler - use commit tagged as `v0.1`.

In course of development several GCC bugs were encountered.
Luckily, GCC team is pretty quick to fix things after you will file a but report.

- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=51989[Bug 51989 (fixed) -- deque iterator, void with templates]
- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=54425[Bug 54425 -- Rvalue/Lvalue overload resolution of templated]
- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=54111[Bug 54111 -- function return type template deduction]
- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=54538[Bug 54538 (fixed) -- (4.8 Regression) Getting assembler messages when compiling]
- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=53858[Bug 53858 (fixed)  -- (4.8 Regression) template aliases used in template parameters default expression]
- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=54648[Bug 54648 -- constexpr function rejected as non const]
- httpx://gcc.gnu.org/bugzilla/show_bug.cgi?id=54859[Bug 54859 -- constexpr in template aliase rejected as non-constant]




CLANG 
~~~~~


CLANG-3.2 is fully supported. 

----------------------------------------------
CXX=clang++
CXXFLAGS+="-D__STRICT_ANSI__  -std=c++0x "
scc 2+2
4
----------------------------------------------

Corresponding CLANG bugs:

- httpx://http://llvm.org/bugs/show_bug.cgi?id=11851[Bug 11851 - constexpr bug ]
- httpx://http://llvm.org/bugs/show_bug.cgi?id=13970[Bug 13970 - constexpr function rejected as non const(dup of 11851)]





== Refs 

* httpx://www.johndcook.com/cpp_regex.html[Getting started with C++ TR1 * regular expressions]
* httpx://www.boost.org/doc/libs/1_46_1/libs/regex/doc/html/boost_regex/introduction_and_overview.html[Boost.Regex]
* httpx://www.boost.org/doc/libs/1_46_1/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html[Perl Regular Expression Syntax]
* httpx://www.boost.org/doc/libs/1_46_1/libs/regex/doc/html/boost_regex/ref/regex_token_iterator.html[regex_token_iterator]
* httpx://www.boost.org/doc/libs/1_46_0/libs/format/doc/format.html#examples[Boost.Format]
* httpx://solarianprogrammer.com/2011/10/20/cpp-11-regex-tutorial[+++C++11 +++ regex tutorial. Part-1 ]/
* httpx://solarianprogrammer.com/2011/10/20/cpp-11-regex-tutorial-part-2[+++C++11 +++  regex tutorial. Part-2]/
* httpx://en.wikipedia.org/wiki/Delimiter[Delimiter]
* httpx://en.wikipedia.org/wiki/Comma-separated_values[CSV]
* httpx://home.vrweb.de/~juergen.kahrs/gawk/XML/[XMLgawk]
* httpx://en.wikipedia.org/wiki/Awk[Awk]
* httpx://people.cs.uu.nl/piet/docs/nawk/nawk_23.html[Awk: Specifying how Fields are Separated]
* httpx://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.200x[LIBSTDC++ status +++C++11+++]
* httpx://www.informit.com/guides/content.aspx?g=cplusplus&seqNum=286[Why I Hate Namespaces]
* httpx://www.gotw.ca/publications/mill17.htm[Why Not Specialize Function Templates?]
* httpx://richardminerich.com/2012/07/functional-programming-is-dead-long-live-expression-oriented-programming/[Functional Programming is Dead, Long Live Expression-Oriented Programming]

////////////////

RANGES
	http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3350.html

	random iterator
		Take arbitrary integer number P that GCD(P, N) == 1 where GCD(P, N) is greatest common divisor of P and N (e.g. GCD(70, 42) == 14, GCD(24, 35) == 1).
		Get sequence K[i] ::= (P * i) mod N + 1, i from 1 to N
		It's proven that sequence K[i] enumerates all numbers between 1 and N with no repeats (actually K[N + 1] == K[1] but that is not a problem because we need only first N numbers).
		If you can efficiently generate such numbers P with uniform distribution (e.g. with a good random function) with using Euclidean algorithm to calculate GCD in O(log(N)) complexity you'll get what you want.

	linq -- http://stackoverflow.com/questions/8910045/template-argument-deduction

MAP
	TRIE
		http://login2win.blogspot.com/2011/06/c-tries.html

	HASH_MAP
		http://msinilo.pl/blog/?p=170
			fastest -- http://code.google.com/p/rdestl/
			http://attractivechaos.wordpress.com/2008/08/28/comparison-of-hash-table-libraries/
			http://attractivechaos.wordpress.com/2008/09/12/the-google-hash-table-library/
			http://www.augustana.ca/~mohrj/courses/1999.fall/csc210/lecture_notes/hashing.html
			http://svn.python.org/view/python/trunk/Objects/dictnotes.txt?view=markup&pathrev=53782
	http://stackoverflow.com/questions/11614106/is-gcc-stdunordered-map-implementation-slow-if-so-why

BENCHMARKS
	A Benchmark for Reading Flat Files Into Memory for Awk, Python, Perl, Java, and Ruby (steve.80cols.com)
		http://www.reddit.com/r/programming/comments/pub98/a_benchmark_for_reading_flat_files_into_memory/
		v2 --  http://steve.80cols.com/flat_file_bakeoff.html
		v1 -- http://steve.80cols.com/reading_flat_files_into_memory_benchmark.html
		https://github.com/lorca/flat_file_benchmark/watchers

	read/fread/mmpa -- http://lemire.me/blog/archives/2012/06/26/which-is-fastest-read-fread-ifstream-or-mmap/

PARSING C++
	http://www.codesynthesis.com/~boris/blog/2010/05/03/parsing-cxx-with-gcc-plugin-part-1/
	http://eli.thegreenplace.net/2011/07/03/parsing-c-in-python-with-clang/

STL
	map adapter: https://github.com/krig/k11/blob/master/src/tests/iter.cpp

GNU AWK
	Specifying how Fields are Separated -- http://www.staff.science.uu.nl/~oostr102/docs/nawk/nawk_23.html
	one liners -- http://www.gnu.org/s/gawk/manual/gawk.html#One_002dshot

STR TO INT 
	http://www.partow.net/programming/strtk/index.html


TOKENIZER 
	http://www.codeproject.com/KB/recipes/Tokenizer.aspx
REGEX
	constexpr (at complie time) --
	http://cpptruths.blogspot.com/2011/07/compile-time-regex-matcher-using.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+CppTruths+%28C%2B%2B+Truths%29&utm_content=Google+Reader
	A Regular Expression Matcher by Rob Pike -- http://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html
	Writing own regular expression parser -- http://www.codeproject.com/KB/recipes/OwnRegExpressionsParser.aspx
	http://swtch.com/~rsc/regexp/
	PCRE++ http://www.linuxquestions.org/questions/showthread.php?p=4387972#post4387972
FORMATS
	ALL
		http://dev.umpirsky.com/list-of-all-countries-in-all-languages-and-all-data-formats/
		https://github.com/simonask/reflect

	JSON
		json parse in spirit -- http://boost-spirit.com/repository/applications/json_spirit.zip
		http://www.kirit.com/Blog:/2008-03-31/Thoughts%20on%20TinyJSON
		http://www.kirit.com/Thread:/1723074
		http://stackoverflow.com/questions/245973/whats-the-best-c-json-parser
		http://stackoverflow.com/a/8560856
		https://github.com/udp/json-parser
		http://zserge.bitbucket.org/jsmn.html

	CSV
		http://csvkit.readthedocs.org/en/latest/index.html
		http://www.partow.net/programming/strtk/index.html
		http://blog.johantibell.com/2012/11/streaming-and-incremental-csv-parsing.html
	XML
		xml parser in spirit
			-- http://boost-spirit.com/repository/applications/xml.zip
			-- http://boost-spirit.com/repository/applications/Arabica.html
		awk xml -- http://pastebin.com/Vwvz3gzb
		http://www.artima.com/cppsource/xml_data_binding.html
		http://www.grinninglizard.com/tinyxml/
		http://stackoverflow.com/questions/170686/best-open-xml-parser-for-c
		http://rapidxml.sourceforge.net/
		http://www.codeguru.com/cpp/data/data-misc/xml/article.php/c19341
		-----------
		There is a boost::xml in the sandbox and it's very good. We use
		TinyXML++ (which is decent) here but boost::xml was preferred; it was
		just too likely to change
	S-Expressions
		http://shinkirou.org/blog/2010/06/s-expressions-the-fat-free-alternative-to-json/
ENCODING
	Boost.Unicode: Aims at providing the foundation tools to
	accurately represent and deal with natural text in C++ in a
	portable and robust manner, so as to allow internationalized
	applications, by implementing parts of the Unicode Standard.
	(see (svn.boost.org/trac/boost/wiki/…;)
		
	This is already included as part of C++03. It's
	provided by the std::codecvt facet of the locale
	library
		
	Take a look on Boost.Locale it is a part of it
DB
	http://tildeslash.com/libzdb/#
	SQL parser in spriti -- http://boost-spirit.com/repository/applications/spirit_sql.zip
	SQL connectors -- http://www.reddit.com/r/cpp/comments/mrbc5/how_to_connect_to_an_sql_database/
	http://soci.sourceforge.net/
	https://svn.boost.org/trac/boost/wiki/LibrariesUnderConstruction#Boost.RDB
	http://webtoolkit.eu/wt#/blog/2009/11/26/wt__dbo__an_orm__c___style
	http://code.google.com/p/hiberlite/
	http://kahimyang.info/kauswagan/howto_blogs/1326-a_simple_c_c___database_daemon
	------------------
	Regarding boost::sql proposal, there is some work in progress:
	    * On BoostCon'09 Jeff Garland led workshop: Library in Week 2009 to discuss the std::rdb propsals, here are materials std::rdb (.tgz package)
	    * std_rdb - Boost sister mailing list to discuss standard rdb proposal(s)
	    * SOCI has been discussed in frame of the std::rdb mailing list and the workshop


vim: ft=asciidoc
///////////////////////////////////
