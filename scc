#!/bin/bash



[ -f /etc/scc ]  && . /etc/scc
[ -f   ~/.scc ]  && .   ~/.scc
[ -f     .scc ]  && .     .scc


#[[ -n $sT ]] && CXXFLGAS+=" -DsT=$sT "


tmpdir=/tmp/`{ echo scc-$USER-; tty; } | sed "s/^\/dev\///"| tr -dc "[0-9a-zA-Z-]"`
mkdir -p ${tmpdir:?}
chmod 700 $tmpdir

SCC_HOME=$(dirname $(readlink -f $0))
CXXFLAGS+=" -I $SCC_HOME -I ${SCC_HOME%/*} -I $tmpdir "

main_cc=$SCC_HOME/main.cc
main_exe=$tmpdir/main_exe
snippet_cc=$tmpdir/snippet.cc
snippet_h=$tmpdir/snippet.h
rm -f $main_exe
execute=1

usage_exit() {
	echo "
	usage:  scc  [options]  snippet  [files|args] 
		
		-n 		- for each line: read line; split into fields; execute snippet 
		-p 		- for each line: read line; split into fields; execute snippet;  output fields
		-f filename 	- get snippet from filename
		-i ifs 		- sets simple (not regex)  IFS (input field separator).
		-F ifs 		- sets simple (not regex)  IFS (input field separator).
		-o ofs 		- sets OFS (output field separator) 
		-x filename	- save executable to file and do not execute it

		-D macro	- adds macro: CXXFLAGS+=" -Dmacro "
		-O 		- optimized compile
		-g 		- debug compile
		-H 		- read header 
		-r 		- regenerate GCH (gcc precompiled headers) 
		-a		- with    AWK module
		-A		- without AWK module
		-s		- with    STO module
		-S		- without STO module
	"
	exit 0
}

####################################################################################### OPTIONS 
gch_dir=$SCC_HOME/.gch


[[  $1 ]]  ||  usage_exit

while getopts aAsSnpf:vBi:F:o:x:OgHtbrD: opt;  do
	case $opt in
		n)	CXXFLAGS+=" -Dscc_N  -Dscc_IS_STREAM ";	 n_opt=1;  is_stream=1;;
		p)	CXXFLAGS+=" -Dscc_P  -Dscc_IS_STREAM ";  p_opt=1;  is_stream=1;;

		a)	scc_NOAWK=1 ;;
		A)	unset scc_AWK ;;

		s)	scc_STO=1 ;;
		S)	unset scc_STO ;;

		D)	CXXFLAGS+=" -D$OPTARG " ;;
		f)	snippet_file=$OPTARG;;
		v)	verbose=1;;
		I)	CXXFLAGS+=" -Dscc_IFS=$OPTARG ";; 
		x)	execute=0;  main_exe=$OPTARG;;
		i|F)	if [[ $OPTARG =~ '"' ]];  then  CXXFLAGS+=" -Dscc_ifs=$OPTARG "
						  else  CXXFLAGS+=" -Dscc_ifs=\"$OPTARG\" ";  fi;; 
		o)	if [[ $OPTARG =~ '"' ]];  then  CXXFLAGS+=" -Dscc_OFS=$OPTARG "
						  else  CXXFLAGS+=" -Dscc_OFS=\"$OPTARG\" ";  fi;; 
		O) 	CXXFLAGS+=$O_FLAGS; gch_dir=.gch/O; is_optimized=1;;
		g) 	CXXFLAGS+=$g_FLAGS; gch_dir=.gch/g;;
		H)	CXXFLAGS+=" -Dscc_HEADER "; ;;
		#t)	time="time -f'\t%E wall  ==  (%U+%S)        %M KB\n"; CXXFLAGS+="-O3 -march=native";;
		b)	CXXFLAGS+=" -Dscc_BENCHMARK ";  p_opt=1; CXXFLAGS+="-O3 -march=native";;
		r)
			set -x 
			mkdir -p .gch/O
			mkdir -p .gch/g
			g++ $CXXFLAGS $O_FLAGS cj.h -o .gch/O/cj.h.gch  
			g++ $CXXFLAGS $g_FLAGS cj.h -o .gch/g/cj.h.gch
			g++ $CXXFLAGS          cj.h -o .gch/cj.h.gch
			exit 0
			;;
		?) 	usage_exit;;
	esac
done

#### CONFIG

[[ $scc_STO ]] && CXXFLAGS+=" -Dscc_STO "
[[ $scc_AWK ]] && CXXFLAGS+=" -Dscc_AWk "
default_CXX="${default_CXX-g++}"


if [[ $scc_STO ]];  then 
	scc_PRINTER="${scc_PRINTER:-out(),}"
else
	scc_PRINTER="${scc_PRINTER:-std::cout<<}"
fi



####
[[ -d $gch_dir ]] && CXXFLAGS=" -include $gch_dir/cj.h    -Winvalid-pch  $CXXFLAGS "
[[ -f .scc.h   ]] && CXXFLAGS+=" -include $PWD/.scc.h  "
[[ $is_optimized  ]] || { CXXFLAGS+=$g_FLAGS;  gch_dir=.gch/g; }


# shift out snippet arg
#[[ -z $snippet_file ]]  &&  shift $((OPTIND-1))
shift $((OPTIND-1))


#####################################################################################  PARSE SNIPPET

if [[ $verbose ]] ; then 
	echo -n "expression: $1             "
	echo -n "gcc-v: `(gcc -v  2>&1) | sed -n '/^gcc version/s/^gcc version \([.0-9]*\) .*/\1/p'`            "
	echo "CXXFLAGS:  ${CXXFLAGS}"
fi 


if [[ -z $snippet_file ]] ;  then
	snippet_file=$tmpdir/snippet.scc
	echo "${1%% }" > $snippet_file
	shift 1
fi


# wrap last statment into "cout << (last_statement) << endl;"
#cat  $snippet_file | sed  's/.*;;//;s/$//;s/[ \t]*$//;s/\(.*[;}]\)*\([^;}]\+$\)/\1 out(), \2 ; is_print_last=true;/' > $snippet_cc

cat  $snippet_file |
sed  -r  '
	s/.*;;//
	s/$//;
	s/[ \t]*$//;
	s/(.*[;])*([^;]+$)/ \1'$scc_PRINTER' \2; is_print_last=true; /
' > $snippet_cc

# split file scope part
cat  $snippet_file | sed  -n 's/\(;;\).*//p'  > $snippet_h


#####################################################################################  GENERATE SRC



${CXX-$default_CXX} $CXXFLAGS $main_cc -o $main_exe $LIBS || exit 1
	
if  [[ $execute == 1 ]]  ; then 
	LCC_ALL=C $time $main_exe "$@"
	exit $?
else
	exit 0
fi

# vim:set ts=8 sw=8 syntax=sh:   
